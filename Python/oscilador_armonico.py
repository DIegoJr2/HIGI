# -*- coding: utf-8 -*-
"""Oscilador_armonico.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/alxogm/HIGI2022/blob/main/python/Oscilador_armonico.ipynb
"""

import numpy as np
import matplotlib.pyplot as plt
import sympy

"""Solución analítica usando sympy tomada de https://flothesof.github.io/harmonic-oscillator-three-methods-solution.html

"""

sympy.init_printing()

m, k, x_0, xdot_0, omega_0, t = sympy.symbols('m, k, x_0, xdot_0, omega_0, t')
x = sympy.Function('x')

sol = sympy.dsolve(sympy.Derivative(x(t), t, 2) + omega_0**2 * x(t))
sol

ics = [sympy.Eq(sol.args[1].subs(t, 0), x_0), sympy.Eq(sol.args[1].diff(t).subs(t, 0), xdot_0)]

solved_ics = sympy.solve(ics)
solved_ics

full_sol = sol.subs(solved_ics[0])
full_sol

case1 = sympy.simplify(full_sol.subs({x_0:1, xdot_0:0, omega_0:2}))
case1

sympy.plot(case1.rhs)

case2 = sympy.simplify(full_sol.subs({x_0:0, xdot_0:1, omega_0:2}))
case2

sympy.plot(case2.rhs)

"""Solución numerica usando el método de *Euler*"""

def euler(x0,v0,omega_0,t0=0,dt=0.01,nsteps=100):
  x=[x0]
  t=[t0]
  for i in range(1,nsteps):
    vi=v0-omega_0**2*x0*dt
    xi=x0+v0*dt
    x.append(xi)
    t.append(t0+dt*i)
    x0=xi
    v0=vi
  return x,t

x,t=euler(1,0,2,nsteps=1000)
plt.plot(t,x)

x,t=euler(0,1,2,nsteps=1000)
plt.plot(t,x)

"""Ejercicio: Revisa e implementa las otras opciones de solución numérica discutidas en https://flothesof.github.io/harmonic-oscillator-three-methods-solution.html"""

def euler2(x0,v0,omega_0,t0=0,dt=0.01,nsteps=100):
  x=[x0]
  t=[t0]
  for i in range(1,nsteps):
    vi=v0-omega_0**2*np.sin(x0)*dt
    xi=x0+v0*dt
    x.append(xi)
    t.append(t0+dt*i)
    x0=xi
    v0=vi
  return x,t

x,t=euler(0,1,2,nsteps=1000)
plt.plot(t,x)

x2,t2=euler2(0,1,2,nsteps=1000)
plt.plot(t2,x2)

